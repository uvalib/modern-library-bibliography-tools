import { ReactiveController, ReactiveControllerHost, TemplateResult } from 'lit';
import './formdata-event-polyfill';
export interface FormSubmitControllerOptions {
    form: (input: unknown) => HTMLFormElement;
    name: (input: unknown) => string;
    value: (input: unknown) => any;
    disabled: (input: unknown) => boolean;
    reportValidity: (input: unknown) => boolean;
}
export declare class FormSubmitController implements ReactiveController {
    host?: ReactiveControllerHost & Element;
    form?: HTMLFormElement;
    options?: FormSubmitControllerOptions;
    constructor(host: ReactiveControllerHost & Element, options?: FormSubmitControllerOptions);
    hostConnected(): void;
    hostDisconnected(): void;
    handleFormData(event: FormDataEvent): void;
    handleFormSubmit(event: Event): void;
    submit(): void;
}
export declare const renderFormControl: (props: {
    inputId: string;
    size: 'small' | 'medium' | 'large';
    labelId?: string | undefined;
    label?: string | undefined;
    hasLabelSlot?: boolean | undefined;
    helpTextId?: string | undefined;
    helpText?: string | undefined;
    hasHelpTextSlot?: boolean | undefined;
    onLabelClick?: ((event: MouseEvent) => void) | undefined;
}, input: TemplateResult) => TemplateResult<1>;
export declare function getLabelledBy(props: {
    labelId: string;
    label: string;
    hasLabelSlot: boolean;
    helpTextId: string;
    helpText: string;
    hasHelpTextSlot: boolean;
}): string | undefined;
