/* eslint no-unused-vars: 0 */
import { html, svg, repeat, classMap, styleMap, ifDefined, unsafeHTML, scopeTag } from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";

const block0 = (context, tags, suffix) => suffix ? html`<${scopeTag("ui5-responsive-popover", tags, suffix)} class="${classMap(context.classes.popover)}" hide-arrow _disable-initial-focus placement-type="Bottom" horizontal-align="Left" style="${styleMap(context.styles.suggestionsPopover)}" @ui5-after-open=${ifDefined(context._afterOpenPopover)} @ui5-after-close=${ifDefined(context._afterClosePopover)}><${scopeTag("ui5-busy-indicator", tags, suffix)} ?active=${context.loading} size="Medium" class="ui5-combobox-busy"></${scopeTag("ui5-busy-indicator", tags, suffix)}>${ context._isPhone ? block1(context, tags, suffix) : undefined }${ !context._isPhone ? block6(context, tags, suffix) : undefined }<${scopeTag("ui5-list", tags, suffix)} separators="None" @ui5-item-click=${ifDefined(context._selectItem)} @ui5-item-focused=${ifDefined(context._onItemFocus)} @mousedown=${context._itemMousedown} mode="SingleSelect">${ repeat(context._filteredItems, (item, index) => item._id || index, (item, index) => block11(item, index, context, tags, suffix)) }</${scopeTag("ui5-list", tags, suffix)}>${ context._isPhone ? block14(context, tags, suffix) : undefined }</${scopeTag("ui5-responsive-popover", tags, suffix)}>${ context.shouldOpenValueStateMessagePopover ? block15(context, tags, suffix) : undefined }` : html`<ui5-responsive-popover class="${classMap(context.classes.popover)}" hide-arrow _disable-initial-focus placement-type="Bottom" horizontal-align="Left" style="${styleMap(context.styles.suggestionsPopover)}" @ui5-after-open=${ifDefined(context._afterOpenPopover)} @ui5-after-close=${ifDefined(context._afterClosePopover)}><ui5-busy-indicator ?active=${context.loading} size="Medium" class="ui5-combobox-busy"></ui5-busy-indicator>${ context._isPhone ? block1(context, tags, suffix) : undefined }${ !context._isPhone ? block6(context, tags, suffix) : undefined }<ui5-list separators="None" @ui5-item-click=${ifDefined(context._selectItem)} @ui5-item-focused=${ifDefined(context._onItemFocus)} @mousedown=${context._itemMousedown} mode="SingleSelect">${ repeat(context._filteredItems, (item, index) => item._id || index, (item, index) => block11(item, index, context, tags, suffix)) }</ui5-list>${ context._isPhone ? block14(context, tags, suffix) : undefined }</ui5-responsive-popover>${ context.shouldOpenValueStateMessagePopover ? block15(context, tags, suffix) : undefined }`;
const block1 = (context, tags, suffix) => suffix ? html`<div slot="header" class="ui5-responsive-popover-header"><div class="row"><span>${ifDefined(context._headerTitleText)}</span><${scopeTag("ui5-button", tags, suffix)} class="ui5-responsive-popover-close-btn" icon="decline" design="Transparent" @click="${context._closeRespPopover}"></${scopeTag("ui5-button", tags, suffix)}></div><div class="row"><div class="input-root-phone" value-state="${ifDefined(context.valueState)}"><input class="ui5-input-inner-phone" .value="${ifDefined(context.value)}" inner-input placeholder="${ifDefined(context.placeholder)}" value-state="${ifDefined(context.valueState)}" @input="${context._input}" @change="${context._inputChange}" @keydown="${context._keydown}" aria-autocomplete="both" /></div></div>${ context.hasValueStateText ? block2(context, tags, suffix) : undefined }</div>` : html`<div slot="header" class="ui5-responsive-popover-header"><div class="row"><span>${ifDefined(context._headerTitleText)}</span><ui5-button class="ui5-responsive-popover-close-btn" icon="decline" design="Transparent" @click="${context._closeRespPopover}"></ui5-button></div><div class="row"><div class="input-root-phone" value-state="${ifDefined(context.valueState)}"><input class="ui5-input-inner-phone" .value="${ifDefined(context.value)}" inner-input placeholder="${ifDefined(context.placeholder)}" value-state="${ifDefined(context.valueState)}" @input="${context._input}" @change="${context._inputChange}" @keydown="${context._keydown}" aria-autocomplete="both" /></div></div>${ context.hasValueStateText ? block2(context, tags, suffix) : undefined }</div>`;
const block2 = (context, tags, suffix) => suffix ? html`<div class="${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.popoverValueStateMessage)}"><${scopeTag("ui5-icon", tags, suffix)} class="ui5-input-value-state-message-icon" name="${ifDefined(context._valueStateMessageIcon)}"></${scopeTag("ui5-icon", tags, suffix)}>${ context.shouldDisplayDefaultValueStateMessage ? block3(context, tags, suffix) : block4(context, tags, suffix) }</div>` : html`<div class="${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.popoverValueStateMessage)}"><ui5-icon class="ui5-input-value-state-message-icon" name="${ifDefined(context._valueStateMessageIcon)}"></ui5-icon>${ context.shouldDisplayDefaultValueStateMessage ? block3(context, tags, suffix) : block4(context, tags, suffix) }</div>`;
const block3 = (context, tags, suffix) => html`${ifDefined(context.valueStateDefaultText)}`;
const block4 = (context, tags, suffix) => html`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block5(item, index, context, tags, suffix)) }`;
const block5 = (item, index, context, tags, suffix) => html`${ifDefined(item)}`;
const block6 = (context, tags, suffix) => html`${ context.hasValueStateText ? block7(context, tags, suffix) : undefined }`;
const block7 = (context, tags, suffix) => suffix ? html`<div slot="header" class="ui5-responsive-popover-header ${classMap(context.classes.popoverValueState)}" ?focused=${context._isValueStateFocused} tabindex="0" style="${styleMap(context.styles.suggestionPopoverHeader)}"><${scopeTag("ui5-icon", tags, suffix)} class="ui5-input-value-state-message-icon" name="${ifDefined(context._valueStateMessageIcon)}"></${scopeTag("ui5-icon", tags, suffix)}>${ context.shouldDisplayDefaultValueStateMessage ? block8(context, tags, suffix) : block9(context, tags, suffix) }</div>` : html`<div slot="header" class="ui5-responsive-popover-header ${classMap(context.classes.popoverValueState)}" ?focused=${context._isValueStateFocused} tabindex="0" style="${styleMap(context.styles.suggestionPopoverHeader)}"><ui5-icon class="ui5-input-value-state-message-icon" name="${ifDefined(context._valueStateMessageIcon)}"></ui5-icon>${ context.shouldDisplayDefaultValueStateMessage ? block8(context, tags, suffix) : block9(context, tags, suffix) }</div>`;
const block8 = (context, tags, suffix) => html`${ifDefined(context.valueStateDefaultText)}`;
const block9 = (context, tags, suffix) => html`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block10(item, index, context, tags, suffix)) }`;
const block10 = (item, index, context, tags, suffix) => html`${ifDefined(item)}`;
const block11 = (item, index, context, tags, suffix) => html`${ item.isGroupItem ? block12(item, index, context, tags, suffix) : block13(item, index, context, tags, suffix) }`;
const block12 = (item, index, context, tags, suffix) => suffix ? html`<${scopeTag("ui5-li-groupheader", tags, suffix)} ?focused=${item.focused}>${ifDefined(item.text)}</${scopeTag("ui5-li-groupheader", tags, suffix)}>` : html`<ui5-li-groupheader ?focused=${item.focused}>${ifDefined(item.text)}</ui5-li-groupheader>`;
const block13 = (item, index, context, tags, suffix) => suffix ? html`<${scopeTag("ui5-li", tags, suffix)} type="Active" additional-text=${ifDefined(item.additionalText)} group-name=${ifDefined(item.groupName)} ._tabIndex=${ifDefined(item.itemTabIndex)} .mappedItem=${ifDefined(item)} ?selected=${item.selected} ?focused=${item.focused}>${ifDefined(item.text)}</${scopeTag("ui5-li", tags, suffix)}>` : html`<ui5-li type="Active" additional-text=${ifDefined(item.additionalText)} group-name=${ifDefined(item.groupName)} ._tabIndex=${ifDefined(item.itemTabIndex)} .mappedItem=${ifDefined(item)} ?selected=${item.selected} ?focused=${item.focused}>${ifDefined(item.text)}</ui5-li>`;
const block14 = (context, tags, suffix) => suffix ? html`<div slot="footer" class="ui5-responsive-popover-footer"><${scopeTag("ui5-button", tags, suffix)} design="Transparent" @click="${context._closeRespPopover}">OK</${scopeTag("ui5-button", tags, suffix)}></div>` : html`<div slot="footer" class="ui5-responsive-popover-footer"><ui5-button design="Transparent" @click="${context._closeRespPopover}">OK</ui5-button></div>`;
const block15 = (context, tags, suffix) => suffix ? html`<${scopeTag("ui5-popover", tags, suffix)} skip-registry-update _disable-initial-focus prevent-focus-restore hide-arrow class="ui5-valuestatemessage-popover" horizontal-align="${ifDefined(context._valueStatePopoverHorizontalAlign)}" placement-type="Bottom"><div slot="header" class="${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.popoverHeader)}"><${scopeTag("ui5-icon", tags, suffix)} class="ui5-input-value-state-message-icon" name="${ifDefined(context._valueStateMessageIcon)}"></${scopeTag("ui5-icon", tags, suffix)}>${ context.shouldDisplayDefaultValueStateMessage ? block16(context, tags, suffix) : block17(context, tags, suffix) }</div></${scopeTag("ui5-popover", tags, suffix)}>` : html`<ui5-popover skip-registry-update _disable-initial-focus prevent-focus-restore hide-arrow class="ui5-valuestatemessage-popover" horizontal-align="${ifDefined(context._valueStatePopoverHorizontalAlign)}" placement-type="Bottom"><div slot="header" class="${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.popoverHeader)}"><ui5-icon class="ui5-input-value-state-message-icon" name="${ifDefined(context._valueStateMessageIcon)}"></ui5-icon>${ context.shouldDisplayDefaultValueStateMessage ? block16(context, tags, suffix) : block17(context, tags, suffix) }</div></ui5-popover>`;
const block16 = (context, tags, suffix) => html`${ifDefined(context.valueStateDefaultText)}`;
const block17 = (context, tags, suffix) => html`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block18(item, index, context, tags, suffix)) }`;
const block18 = (item, index, context, tags, suffix) => html`${ifDefined(item)}`;


export default block0;