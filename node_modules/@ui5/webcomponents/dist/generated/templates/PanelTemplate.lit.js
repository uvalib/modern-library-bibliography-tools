/* eslint no-unused-vars: 0 */
import { html, svg, repeat, classMap, styleMap, ifDefined, unsafeHTML, scopeTag } from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";

const block0 = (context, tags, suffix) => html`<div class="ui5-panel-root" role="${ifDefined(context.accRole)}" aria-label="${ifDefined(context.effectiveAccessibleName)}" aria-labelledby="${ifDefined(context.fixedPanelAriaLabelledbyReference)}">${ context.hasHeaderOrHeaderText ? block1(context, tags, suffix) : undefined }<div class="ui5-panel-content" id="${ifDefined(context._id)}-content" tabindex="-1" style="${styleMap(context.styles.content)}" part="content"><slot></slot></div></div>`;
const block1 = (context, tags, suffix) => html`<div class="ui5-panel-heading-wrapper" role="${ifDefined(context.headingWrapperRole)}" aria-level="${ifDefined(context.headingWrapperAriaLevel)}"><div @click="${context._headerClick}" @keydown="${context._headerKeyDown}" @keyup="${context._headerKeyUp}" class="ui5-panel-header" tabindex="${ifDefined(context.headerTabIndex)}" role="${ifDefined(context.accInfo.role)}" aria-expanded="${ifDefined(context.accInfo.ariaExpanded)}" aria-controls="${ifDefined(context.accInfo.ariaControls)}" aria-labelledby="${ifDefined(context.accInfo.ariaLabelledby)}" part="header">${ !context.fixed ? block2(context, tags, suffix) : undefined }${ context._hasHeader ? block5(context, tags, suffix) : block6(context, tags, suffix) }</div></div>`;
const block2 = (context, tags, suffix) => html`<div class="ui5-panel-header-button-root">${ context._hasHeader ? block3(context, tags, suffix) : block4(context, tags, suffix) }</div>`;
const block3 = (context, tags, suffix) => suffix ? html`<${scopeTag("ui5-button", tags, suffix)} design="Transparent" class="ui5-panel-header-button ui5-panel-header-button-with-icon" @click="${context._toggleButtonClick}" .accessibilityAttributes=${ifDefined(context.accInfo.button.accessibilityAttributes)} tooltip="${ifDefined(context.accInfo.button.title)}" accessible-name="${ifDefined(context.accInfo.button.ariaLabelButton)}"><div class="ui5-panel-header-icon-wrapper"><${scopeTag("ui5-icon", tags, suffix)} class="ui5-panel-header-icon ${classMap(context.classes.headerBtn)}" name="slim-arrow-right"></${scopeTag("ui5-icon", tags, suffix)}></div></${scopeTag("ui5-button", tags, suffix)}>` : html`<ui5-button design="Transparent" class="ui5-panel-header-button ui5-panel-header-button-with-icon" @click="${context._toggleButtonClick}" .accessibilityAttributes=${ifDefined(context.accInfo.button.accessibilityAttributes)} tooltip="${ifDefined(context.accInfo.button.title)}" accessible-name="${ifDefined(context.accInfo.button.ariaLabelButton)}"><div class="ui5-panel-header-icon-wrapper"><ui5-icon class="ui5-panel-header-icon ${classMap(context.classes.headerBtn)}" name="slim-arrow-right"></ui5-icon></div></ui5-button>`;
const block4 = (context, tags, suffix) => suffix ? html`<${scopeTag("ui5-icon", tags, suffix)} class="ui5-panel-header-button ui5-panel-header-icon ${classMap(context.classes.headerBtn)}" name="slim-arrow-right" show-tooltip accessible-name="${ifDefined(context.toggleButtonTitle)}"></${scopeTag("ui5-icon", tags, suffix)}>` : html`<ui5-icon class="ui5-panel-header-button ui5-panel-header-icon ${classMap(context.classes.headerBtn)}" name="slim-arrow-right" show-tooltip accessible-name="${ifDefined(context.toggleButtonTitle)}"></ui5-icon>`;
const block5 = (context, tags, suffix) => html`<slot name="header"></slot>`;
const block6 = (context, tags, suffix) => html`<div id="${ifDefined(context._id)}-header-title" class="ui5-panel-header-title">${ifDefined(context.headerText)}</div>`;


export default block0;