/* eslint no-unused-vars: 0 */
import { html, svg, repeat, classMap, styleMap, ifDefined, unsafeHTML, scopeTag } from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";

const block0 = (context, tags, suffix) => suffix ? html`<div class="ui5-select-root ui5-input-focusable-element" id="${ifDefined(context._id)}-select" @click="${context._onclick}">${ context.selectedOptionIcon ? block1(context, tags, suffix) : undefined }<div class="ui5-select-label-root" data-sap-focus-ref tabindex="${ifDefined(context.tabIndex)}" role="combobox" aria-haspopup="listbox" aria-label="${ifDefined(context.ariaLabelText)}" aria-describedby="${ifDefined(context.valueStateTextId)}" aria-disabled="${ifDefined(context.isDisabled)}" aria-required="${ifDefined(context.required)}" aria-expanded="${ifDefined(context._isPickerOpen)}" aria-roledescription="${ifDefined(context._ariaRoleDescription)}" @keydown="${context._onkeydown}" @keypress="${context._handleKeyboardNavigation}" @keyup="${context._onkeyup}" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}">${ifDefined(context._text)}</div><${scopeTag("ui5-icon", tags, suffix)} name="slim-arrow-down" input-icon ?pressed="${context._iconPressed}"></${scopeTag("ui5-icon", tags, suffix)}>${ context.hasValueState ? block2(context, tags, suffix) : undefined }<slot name="formSupport"></slot></div>` : html`<div class="ui5-select-root ui5-input-focusable-element" id="${ifDefined(context._id)}-select" @click="${context._onclick}">${ context.selectedOptionIcon ? block1(context, tags, suffix) : undefined }<div class="ui5-select-label-root" data-sap-focus-ref tabindex="${ifDefined(context.tabIndex)}" role="combobox" aria-haspopup="listbox" aria-label="${ifDefined(context.ariaLabelText)}" aria-describedby="${ifDefined(context.valueStateTextId)}" aria-disabled="${ifDefined(context.isDisabled)}" aria-required="${ifDefined(context.required)}" aria-expanded="${ifDefined(context._isPickerOpen)}" aria-roledescription="${ifDefined(context._ariaRoleDescription)}" @keydown="${context._onkeydown}" @keypress="${context._handleKeyboardNavigation}" @keyup="${context._onkeyup}" @focusin="${context._onfocusin}" @focusout="${context._onfocusout}">${ifDefined(context._text)}</div><ui5-icon name="slim-arrow-down" input-icon ?pressed="${context._iconPressed}"></ui5-icon>${ context.hasValueState ? block2(context, tags, suffix) : undefined }<slot name="formSupport"></slot></div>`;
const block1 = (context, tags, suffix) => suffix ? html`<${scopeTag("ui5-icon", tags, suffix)} aria-hidden="true" class="ui5-select-option-icon" name="${ifDefined(context.selectedOptionIcon)}"></${scopeTag("ui5-icon", tags, suffix)}>` : html`<ui5-icon aria-hidden="true" class="ui5-select-option-icon" name="${ifDefined(context.selectedOptionIcon)}"></ui5-icon>`;
const block2 = (context, tags, suffix) => html`<span id="${ifDefined(context._id)}-valueStateDesc" class="ui5-hidden-text">${ifDefined(context.valueStateText)}</span>`;


export default block0;