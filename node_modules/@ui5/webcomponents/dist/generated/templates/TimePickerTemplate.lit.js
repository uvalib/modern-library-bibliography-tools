/* eslint no-unused-vars: 0 */
import { html, svg, repeat, classMap, styleMap, ifDefined, unsafeHTML, scopeTag } from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";

const block0 = (context, tags, suffix) => suffix ? html`<div id="${ifDefined(context._id)}" class="ui5-time-picker-root"><${scopeTag("ui5-input", tags, suffix)} id="${ifDefined(context._id)}-inner" value="${ifDefined(context.value)}" placeholder="${ifDefined(context._placeholder)}" ?disabled="${context.disabled}" ?readonly="${context.readonly}" value-state="${ifDefined(context.valueState)}" ._inputAccInfo="${ifDefined(context.accInfo)}" data-sap-focus-ref @click="${context._handleInputClick}" @ui5-change="${ifDefined(context._handleInputChange)}" @ui5-input="${ifDefined(context._handleInputLiveChange)}" class="ui5-time-picker-input" @keydown="${context._onkeydown}">${ context.valueStateMessage.length ? block1(context, tags, suffix) : undefined }${ !context.readonly ? block2(context, tags, suffix) : undefined }</${scopeTag("ui5-input", tags, suffix)}></div>` : html`<div id="${ifDefined(context._id)}" class="ui5-time-picker-root"><ui5-input id="${ifDefined(context._id)}-inner" value="${ifDefined(context.value)}" placeholder="${ifDefined(context._placeholder)}" ?disabled="${context.disabled}" ?readonly="${context.readonly}" value-state="${ifDefined(context.valueState)}" ._inputAccInfo="${ifDefined(context.accInfo)}" data-sap-focus-ref @click="${context._handleInputClick}" @ui5-change="${ifDefined(context._handleInputChange)}" @ui5-input="${ifDefined(context._handleInputLiveChange)}" class="ui5-time-picker-input" @keydown="${context._onkeydown}">${ context.valueStateMessage.length ? block1(context, tags, suffix) : undefined }${ !context.readonly ? block2(context, tags, suffix) : undefined }</ui5-input></div>`;
const block1 = (context, tags, suffix) => html`<slot name="valueStateMessage" slot="valueStateMessage"></slot>`;
const block2 = (context, tags, suffix) => suffix ? html`<${scopeTag("ui5-icon", tags, suffix)} slot="icon" name="${ifDefined(context.openIconName)}" tabindex="-1" show-tooltip @click="${context.togglePicker}" input-icon ?pressed="${context._isPickerOpen}" class="ui5-time-picker-input-icon-button"></${scopeTag("ui5-icon", tags, suffix)}>` : html`<ui5-icon slot="icon" name="${ifDefined(context.openIconName)}" tabindex="-1" show-tooltip @click="${context.togglePicker}" input-icon ?pressed="${context._isPickerOpen}" class="ui5-time-picker-input-icon-button"></ui5-icon>`;


export default block0;