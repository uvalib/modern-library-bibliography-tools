var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var Switch_1;
import UI5Element from "@ui5/webcomponents-base/dist/UI5Element.js";
import customElement from "@ui5/webcomponents-base/dist/decorators/customElement.js";
import property from "@ui5/webcomponents-base/dist/decorators/property.js";
import event from "@ui5/webcomponents-base/dist/decorators/event.js";
import languageAware from "@ui5/webcomponents-base/dist/decorators/languageAware.js";
import litRender from "@ui5/webcomponents-base/dist/renderer/LitRenderer.js";
import { isSpace, isEnter } from "@ui5/webcomponents-base/dist/Keys.js";
import { isDesktop } from "@ui5/webcomponents-base/dist/Device.js";
import { getI18nBundle } from "@ui5/webcomponents-base/dist/i18nBundle.js";
import { getEffectiveAriaLabelText } from "@ui5/webcomponents-base/dist/util/AriaLabelHelper.js";
import "@ui5/webcomponents-icons/dist/accept.js";
import "@ui5/webcomponents-icons/dist/decline.js";
import "@ui5/webcomponents-icons/dist/less.js";
import Icon from "./Icon.js";
import SwitchDesign from "./types/SwitchDesign.js";
// Template
import SwitchTemplate from "./generated/templates/SwitchTemplate.lit.js";
// Styles
import switchCss from "./generated/themes/Switch.css.js";
/**
 * @class
 *
 * <h3 class="comment-api-title">Overview</h3>
 * The <code>ui5-switch</code> component is used for changing between binary states.
 * <br>
 * The component can display texts, that will be switched, based on the component state, via the <code>textOn</code> and <code>textOff</code> properties,
 * but texts longer than 3 letters will be cutted off.
 * <br>
 * However, users are able to customize the width of <code>ui5-switch</code> with pure CSS (<code>&lt;ui5-switch style="width: 200px"></code>), and set widths, depending on the texts they would use.
 * <br>
 * Note: the component would not automatically stretch to fit the whole text width.
 *
 * <h3>Keyboard Handling</h3>
 * The state can be changed by pressing the Space and Enter keys.
 *
 * <h3>CSS Shadow Parts</h3>
 *
 * <ui5-link target="_blank" href="https://developer.mozilla.org/en-US/docs/Web/CSS/::part">CSS Shadow Parts</ui5-link> allow developers to style elements inside the Shadow DOM.
 * <br>
 * The <code>ui5-switch</code> exposes the following CSS Shadow Parts:
 * <ul>
 * <li>slider - Used to style the track, where the handle is being slid</li>
 * <li>text-on - Used to style the <code>textOn</code> property text</li>
 * <li>text-off - Used to style the <code>textOff</code> property text</li>
 * <li>handle - Used to style the handle of the switch</li>
 * </ul>
 *
 * <h3>ES6 Module Import</h3>
 *
 * <code>import "@ui5/webcomponents/dist/Switch";</code>
 *
 * @constructor
 * @author SAP SE
 * @alias sap.ui.webc.main.Switch
 * @extends sap.ui.webc.base.UI5Element
 * @tagname ui5-switch
 * @public
 * @since 0.8.0
 */
let Switch = Switch_1 = class Switch extends UI5Element {
    static get styles() {
        return switchCss;
    }
    static get render() {
        return litRender;
    }
    static get template() {
        return SwitchTemplate;
    }
    get sapNextIcon() {
        return this.checked ? "accept" : "less";
    }
    _onclick() {
        this.toggle();
    }
    _onkeydown(e) {
        if (isSpace(e)) {
            e.preventDefault();
        }
        if (isEnter(e)) {
            this.toggle();
        }
    }
    _onkeyup(e) {
        if (isSpace(e)) {
            this.toggle();
        }
    }
    toggle() {
        if (!this.disabled) {
            this.checked = !this.checked;
            this.fireEvent("change");
            // Angular two way data binding;
            this.fireEvent("value-changed");
        }
    }
    get graphical() {
        return this.design === SwitchDesign.Graphical;
    }
    get hasNoLabel() {
        return !(this.graphical || this.textOn || this.textOff);
    }
    get _textOn() {
        return this.graphical ? "" : this.textOn;
    }
    get _textOff() {
        return this.graphical ? "" : this.textOff;
    }
    get effectiveTabIndex() {
        return this.disabled ? undefined : "0";
    }
    get classes() {
        const hasLabel = this.graphical || this.textOn || this.textOff;
        return {
            main: {
                "ui5-switch-desktop": isDesktop(),
                "ui5-switch--disabled": this.disabled,
                "ui5-switch--checked": this.checked,
                "ui5-switch--semantic": this.graphical,
                "ui5-switch--no-label": !hasLabel,
            },
        };
    }
    get effectiveAriaDisabled() {
        return this.disabled ? "true" : undefined;
    }
    get accessibilityOnText() {
        return this._textOn;
    }
    get accessibilityOffText() {
        return this._textOff;
    }
    get hiddenText() {
        return this.checked ? this.accessibilityOnText : this.accessibilityOffText;
    }
    get ariaLabelText() {
        return [getEffectiveAriaLabelText(this), this.hiddenText].join(" ").trim();
    }
    static get dependencies() {
        return [Icon];
    }
    static async onDefine() {
        Switch_1.i18nBundle = await getI18nBundle("@ui5/webcomponents");
    }
};
__decorate([
    property({ type: SwitchDesign, defaultValue: SwitchDesign.Textual })
], Switch.prototype, "design", void 0);
__decorate([
    property({ type: Boolean })
], Switch.prototype, "checked", void 0);
__decorate([
    property({ type: Boolean })
], Switch.prototype, "disabled", void 0);
__decorate([
    property()
], Switch.prototype, "textOn", void 0);
__decorate([
    property()
], Switch.prototype, "textOff", void 0);
__decorate([
    property()
], Switch.prototype, "accessibleName", void 0);
__decorate([
    property({ defaultValue: "" })
], Switch.prototype, "accessibleNameRef", void 0);
__decorate([
    property()
], Switch.prototype, "tooltip", void 0);
Switch = Switch_1 = __decorate([
    customElement("ui5-switch"),
    languageAware
    /**
     * Fired when the component checked state changes.
     *
     * @public
     * @event sap.ui.webc.main.Switch#change
     */
    ,
    event("change")
], Switch);
Switch.define();
export default Switch;
//# sourceMappingURL=Switch.js.map